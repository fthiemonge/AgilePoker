@model AgilePoker.Models.Room
@{
    ViewBag.Title = @Model.RoomName;
}
<hgroup class="title">
    <h1>@Model.RoomName</h1>
</hgroup>

<div class="row">
    <div class="col-md-5 col-sm-5">

            <div id="divScrumMaster">
                <input type="submit" value="Show Votes" id="btnShowVotes" />
                <input type="submit" value="Clear Votes" id="btnClearVotes" />
            </div>
            <br/>

            <div id="divSelectedCard">
                <!-- TODO: Show selected card -->
            </div>

            <label for="ddlSelectedCard">Select a Card</label><br/>
            @Html.DropDownList("ddlSelectedCard", new SelectList(Model.PlayingCards, "Value", "CardName"))
            <br/>
            <br/>
            <input type="button" value="Vote!" id="btnVote"/>

    </div>
    <br/>
    <div class="col-md-7 col-sm-7">
        <div id="signalRUpdateTable">
            <table border="1">
                <thead>
                    <tr><th>Player</th><th>Hand</th></tr>
                </thead>
                <tbody>
                    <tr><td colspan="2">loading...</td></tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

<script src="../../Scripts/jquery.signalR-2.0.3.min.js"></script>
<script src="signalr/hubs"></script>
<script type="text/javascript">
    $(function() {

        var agilePokerHub = $.connection.AgilePokerHub;
        var roomName = '@Model.RoomName';
        var $updateTable = $('#signalRUpdateTable');
        var $updateTableBody = $updateTable.find('tbody');
        var voteTemplate = '<tr><td>{Player}</td><td>{Hand}</td></tr>';

        var serializedRoom = '@Model.SerializedAgilePokerRoom';
        
        $.connection.hub.start(function() {
            // TODO: Get groups working correctly
            alert("starting");
            $('#btnVote').click(function () {
                vote();
            });
            
            $('#btnShowVotes').click(function () {
                showVotes();
            });
            
            $('#btnClearVotes').click(function () {
                clearVotes();
            });
        });

        function init() {
            alert("Init!");
            agilePokerHub.server.getRoom(roomName).done(function (room) {
                updateRoom(room);
            });
        }

        agilePokerHub.client.broadcastRoom = function (room) {
            alert("broadcastPokerHands " + room.RoomName);
            updateRoom(room);
        };

        $.connection.hub.start().done(init);

        function updateRoom(room) {
            alert("updateRoom " + room);
            serializedRoom = room;
            $updateTableBody.empty();
            if (room != undefined && room.Votes != undefined) {
                $.each(room.Votes, function () {
                    $updateTableBody.append(voteTemplate.replace('{Player}', this.User.PreferredName).replace('{Hand}', getVoteHtml(this.Card, room.ShowVotes)));
                });
            }
        }
        
        function vote() {
            alert("Voting...");
            agilePokerHub.server.vote(roomName, '@User.Identity.Name', $('#ddlSelectedCard').val()).done(function () {
                // TODO: Display card
                
                alert("Voted!");
            });
        }
        
        function showVotes() {
            alert("ShowVotes...");
            agilePokerHub.server.showVotes(roomName);
        }
        
        function clearVotes() {
            alert("ClearVotes...");
            agilePokerHub.server.clearVotes(roomName);
        }

        function getVoteHtml(card, showVotes) {
            alert("getVoteHtml card: " + card);
            alert("getVoteHtml showVotes: " + showVotes);
            if (card == undefined) {
                return "No Vote";
            }
            if (!showVotes) {
                return "Voted";
            }
            return "<img src='" + card.PictureUrl + "' title='" + card.CardName + "' alt='" + card.CardName + "' width='30'/>";
        }
    });
    
</script>
