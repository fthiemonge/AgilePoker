@model AgilePoker.Models.Room
@{
    ViewBag.Title = @Model.RoomName;
}
<hgroup class="title">
    <h1>@Model.RoomName</h1>
</hgroup>
<h3 id="subHeading"></h3>
<div id="divNewSubHeading" style="display: none">
    <input type="text" id="txtSubHeading" />
    <input type="submit" class="btn-info" value=" > " id="btnSubHeading" />
</div>
<a id="lnkLeaveRoom">Leave Room</a><br/><br/>

<div class="row">
    <div class="col-md-7 col-sm-7">

        <div id="divScrumMaster">
            <input type="submit" value="Show Votes" class="btn-primary" id="btnShowVotes" />
            <input type="submit" value="Clear Votes" class="btn-info" id="btnClearVotes" />
        </div>
        <div id="divHand" style="display: none">
            @foreach (var card in Model.PlayingCards.OrderBy(x => x.Sequence))
            {
                <div class="card" id="Card_@card.Sequence" data-card-value="@card.Sequence">
                    <div class="cardClickTarget" data-card-value="@card.Sequence"></div>
                    <div class="cardTop"><span>@card.Representation</span></div>
                    <div class="cardCenter">
                        @if (card.Type == AgilePoker.CardType.Image)
                        {
                            <img src="@card.PictureUrl" title="@card.CardName" alt="@card.CardName" />
                        }
                        else
                        {
                            <span>@card.Representation</span>
                        }
                    </div>
                    <div class="cardBottom"><span>@card.Representation</span></div>
                    <div class="cardTarget" data-card-id="Card_@card.Sequence" data-card-value="@card.Sequence"></div>
                    </div>
            }
        </div>

    </div>
    <br/>
    <div class="col-md-5 col-sm-5">
        <div id="signalRUpdateTable">
            <table border="1">
                <thead>
                    <tr><th>Player</th><th>&nbsp;</th><th>Hand</th></tr>
                </thead>
                <tbody>
                    <tr><td colspan="3">loading...</td></tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

<script src="../../Scripts/jquery.signalR-2.0.3.min.js"> </script>
<script src='/signalr/js'> </script>
<script type="text/javascript">
    $(function() {

        var agilePokerHub = $.connection.AgilePokerHub;
        var roomName = '@Model.RoomName';
        var $updateTable = $('#signalRUpdateTable');
        var $updateTableBody = $updateTable.find('tbody');
        
        var serializedRoom = '';

        $.connection.hub.start(function() {
            $('#btnVote').click(function() {
                vote();
            });

            $('#btnShowVotes').click(function() {
                showVotes();
            });

            $('#btnClearVotes').click(function() {
                clearVotes();
            });

            $('#lnkLeaveRoom').click(function() {
                if (confirm('Are you sure?')) {
                    leaveRoom();
                }
            });
            $('.cardTarget').click(function (event) {
                vote(event);
            });
            
            $('#btnSubHeading').click(function() {
                updateSubHeading();
            })
        });

        function init() {
            agilePokerHub.server.joinRoom(roomName);
        }

        agilePokerHub.client.broadcastKillRoom = function() {
            window.location.href = '../../Home';
        };
        
        agilePokerHub.client.broadcastUpdateRoom = function(room, shouldClearVotes) {
            updateRoom(room);
            if (shouldClearVotes) {
                $(".selectedCard").removeClass("selectedCard");
            }
        };

        $.connection.hub.start().done(init);

        function updateRoom(room) {
            serializedRoom = room;
            $updateTableBody.empty();
            if (room != undefined) {
                if (room.Votes != undefined) {
                    $.each(room.Votes, function() {
                        $tr = $("<tr>");
                        $tr.append($("<td>").text(this.User.PreferredName));
                        $tr.append("<td>&nbsp;</td>");
                        $tr.append($("<td>").append(getVoteHtml(this.Card, room.ShowVotes)));
                        $updateTableBody.append($tr);
                    });
                } 
                if (room.ShowVotes || isObserver(room)) {
                    $('#divHand').hide();
                } else {
                    $('#divHand').show();
                }
                $('#subHeading').empty();
                $('#subHeading').append(room.SubHeading);
                if (isScrumMaster(room)) {
                    $('#divNewSubHeading').show();
                    $('#txtSubHeading').val(room.SubHeading);
                }
            }
        }
        
        function isObserver(room) {
            var userName = $.trim('@User.Identity.Name'.replace(/\\/g, ''));
            var returnVal = false;
            $.each(room.Observers, function () {
                var uniqueName = $.trim(this.UniqueName.replace(/\\/g, ''));
                if (userName === uniqueName) {
                    returnVal = true;
                    return false;
                }
            });
            return returnVal;
        }
        
        function isScrumMaster(room) {
            var userName = $.trim('@User.Identity.Name'.replace(/\\/g, ''));
            var scrumMasterName = $.trim(room.ScrumMaster.UniqueName.replace(/\\/g, ''));
            if (userName === scrumMasterName) {
                return true;
            }
            return false;
         }

        function vote(event) {
            var value = $(event.target).attr("data-card-value");
            agilePokerHub.server.vote(roomName, '@User.Identity.Name', value).done(function (card) {
                $(".selectedCard").removeClass("selectedCard");
                $(event.target).parent().addClass("selectedCard");
            });
        }

        function showVotes() {
            agilePokerHub.server.showVotes(roomName);
        }

        function clearVotes() {
            agilePokerHub.server.clearVotes(roomName);
        }
        
        function updateSubHeading() {
            agilePokerHub.server.updateSubHeading(roomName, $('#txtSubHeading').val());
        }

        function getVoteHtml(card, shouldShowVotes) {
            $smallCard = $("<div>").addClass("smallCard");
            if (card == undefined) {
                return $smallCard;
            }
            if (!shouldShowVotes) {
                $smallCard.append($("<span>").text("\u2713"));
            }
            else {
                if (card.Type == "@Convert.ToInt32(AgilePoker.CardType.Image)") {
                    $smallCard.append($("<img>", { src: card.PictureUrl, title: card.CardName, alt: card.CardName }));
                }
                else {
                    $smallCard.append($("<span>").text(card.Representation.toString()));
                }
            }
            return $smallCard;

        }

        function leaveRoom() {
            agilePokerHub.server.leaveRoom(roomName, '@User.Identity.Name');
        }
    });

</script>